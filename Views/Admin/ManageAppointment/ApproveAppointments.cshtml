<link rel="stylesheet" href="~/css/approve-appointments.css"/>
<style>
    .appointment-item {
        transition: all 0.3s ease;
        border: 2px solid transparent !important;
    }
    .appointment-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 .5rem 1rem rgba(0,0,0,.15) !important;
    }
    .bg-warning-subtle {
        background-color: rgba(255, 193, 7, 0.1) !important;
    }
    .bg-info-subtle {
        background-color: rgba(13, 202, 240, 0.1) !important;
    }
    .appointment-item.border-warning {
        border-color: #ffc107 !important;
    }
    .appointment-item:not(.border-warning) {
        border-color: #0dcaf0 !important;
    }
    .card-title {
        font-weight: 600;
    }
</style>


@model pet_spa_system1.ViewModel.ApproveAppointmentsViewModel
@{
    ViewData["Title"] = "Duyệt lịch hẹn";
    Layout = "~/Views/Admin/_LayoutAdmin.cshtml";
    var grouped = Model.PendingAppointments.OrderBy(a => a.AppointmentDate)
        .GroupBy(a => a.AppointmentDate)
        .OrderBy(g => g.Key)
        .ToList();
}
<div id="toast-overlay"></div>
<div class="container-fluid mt-3">
    <h2 class="mb-4">Duyệt lịch hẹn</h2>
    <!-- Bộ lọc & tìm kiếm -->
    <form id="filter-form" class="row mb-3 align-items-end">
        @Html.AntiForgeryToken()
        <div class="col-md-3">
            <label for="search-customer" class="form-label">Khách hàng</label>
            <input type="text" id="search-customer" class="form-control" placeholder="Tìm theo tên khách..."/>
        </div>
        <div class="col-md-3">
            <label for="search-pet" class="form-label">Thú cưng</label>
            <input type="text" id="search-pet" class="form-control" placeholder="Tìm theo tên thú cưng..."/>
        </div>
        <div class="col-md-3">
            <label for="search-service" class="form-label">Dịch vụ</label>
            <input type="text" id="search-service" class="form-control" placeholder="Tìm theo dịch vụ..."/>
        </div>
        <div class="col-md-2">
            <label for="filter-status" class="form-label">Trạng thái</label>
            <select id="filter-status" class="form-select">
                <option value="">Tất cả</option>
                @if (Model.Statuses != null)
                {
                    foreach (var status in Model.Statuses.Where(s => s.StatusId == 1 || s.StatusId == 6))
                    {
                        <option value="@status.StatusId">@status.StatusName</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-1">
            <button type="button" id="btn-filter" class="btn btn-primary w-100">Lọc</button>
        </div>
    </form>
    <div id="appointments-list">
        @if (grouped.Count == 0)
        {
            <div class="alert alert-info">Không có lịch hẹn chờ duyệt.</div>
        }
        else
        {
            int groupIndex = 0;
            foreach (var group in grouped)
            {
                var collapseId = $"collapse-{group.Key:yyyyMMdd}";
                <div class="card mb-3 appointment-card">
                    <div class="card-header d-flex justify-content-between align-items-center"
                        style="cursor:pointer; background-color:#f8f9fa;" 
                        role="button" tabindex="0">
                        <h5 class="mb-0 text-primary">@group.Key.ToString("dd/MM/yyyy")</h5>
                        <span class="badge badge-info">@group.Count() lịch hẹn</span>
                        <span class="ml-auto"><i class="fas fa-chevron-down collapse-icon"></i></span>
                    </div>
                    <div id="@collapseId" class="collapse-content @(groupIndex == 0 ? "show" : "")">
                        <div class="card-body">
                            <div class="row">
                                @foreach (var appointment in group)
                                {
                                    <div class="col-md-4 mb-3" id="row-appointment-@appointment.AppointmentId">
                                        <div
                                            class="card shadow appointment-item @(appointment.StatusId == 6 ? "border-warning bg-warning-subtle" : "bg-info-subtle")">
                                            <div class="card-body">
                                                <h6 class="card-title">
                                                    <i class="fas @(appointment.StatusId == 6 ? "fa-exclamation-triangle text-warning" : "fa-clock text-info") me-2"></i>
                                                    Khách: @appointment.CustomerName
                                                </h6>
                                                <p class="card-text">Thú
                                                    cưng: @string.Join(", ", appointment.SelectedPets.Select(p => p.Name))</p>
                                                <p class="card-text">Dịch
                                                    vụ: @string.Join(", ", appointment.SelectedServices.Select(s => s.Name))</p>
                                                <p class="card-text">
                                                    Thời gian: @appointment.StartTime.ToString("HH:mm") - 
                                                    @appointment.EndTime.ToString("HH:mm")
                                                </p>
                                                @if (appointment.StatusId == 6)
                                                {
                                                    <div class="mb-2 text-warning font-weight-bold">Yêu cầu hủy lịch
                                                        (chờ duyệt)
                                                    </div>
                                                    <button class="btn btn-danger btn-approve-cancel"
                                                            data-appointment-id="@appointment.AppointmentId">Duyệt hủy
                                                    </button>
                                                    <button class="btn btn-outline-secondary btn-reject-cancel"
                                                            data-appointment-id="@appointment.AppointmentId">Từ chối hủy
                                                    </button>
                                                }
                                                else
                                                {
                                                    <div class="mt-3 d-flex gap-2">
                                                        <button class="btn btn-primary flex-fill" onclick="alert('Chức năng đang được phát triển');">
                                                            <i class="fas fa-magic me-1"></i>Tự động
                                                        </button>
                                                        <a href="/AdminAppointment/Edit?id=@appointment.AppointmentId" 
                                                           class="btn btn-outline-primary flex-fill">
                                                            <i class="fas fa-user-edit me-1"></i>Thủ công
                                                        </a>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                groupIndex++;
            }
        }
    </div>
</div>



@section Scripts {
    <script src="~/js/jquery.counterup.min.js"></script>
    <script src="~/js/waypoints.min.js"></script>
    <script src="~/js/main.js"></script>
    <!-- Đã loại bỏ scrollIt.min.js để tránh lỗi 404 và lỗi $.scrollIt is not a function -->

    <script>
        $(document).ready(function () {
            // Đặt options mặc định cho toastr
            const defaultToastrOptions = {
                "closeButton": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "timeOut": "2000"
            };
            toastr.options = defaultToastrOptions;

            // Toast xác nhận chuyên nghiệp, căn giữa màn hình, overlay mờ, icon rõ ràng
            function showCenterConfirmToast(message, yesLabel, noLabel, onYes) {
                $('#toast-overlay').show();
                let $container = $('#toast-container.toast-center-screen');
                if ($container.length === 0) {
                    $container = $('<div id="toast-container" class="toast-center-screen"></div>').appendTo('body');
                }
                $container.html('');
                let html = `
                    <div class="toast" style="display:block;">
                        <div style="font-size:2rem;color:#f7b731;margin-bottom:8px;">
                            <i class="fas fa-question-circle"></i>
                        </div>
                        <div>${message}</div>
                        <div class="toast-action mt-2 text-center">
                            <button class="btn btn-success mr-2 btn-toast-yes">${yesLabel}</button>
                            <button class="btn btn-secondary btn-toast-no">${noLabel}</button>
                        </div>
                    </div>
                `;
                $container.append(html);
                $container.find('.btn-toast-yes').off('click').on('click', function () {
                    $('#toast-overlay').hide();
                    $container.html('');
                    onYes();
                });
                $container.find('.btn-toast-no').off('click').on('click', function () {
                    $('#toast-overlay').hide();
                    $container.html('');
                });
            }

            let loading = false;

            // Lưu trữ trạng thái của các collapse
            let expandedDates = new Set();
            
            // Lưu trạng thái collapse hiện tại
            function saveCollapseStates() {
                $('.collapse').each(function() {
                    if ($(this).hasClass('show')) {
                        expandedDates.add($(this).attr('id'));
                    }
                });
            }

            // Khôi phục trạng thái collapse
            function restoreCollapseStates() {
                expandedDates.forEach(id => {
                    $(`#${id}`).addClass('show');
                    $(`[data-target="#${id}"]`).attr('aria-expanded', 'true');
                });
            }

            function loadPage(page, filters = {}) {
                if (loading) return;
                loading = true;
                
                // Add loading state
                $('#appointments-list').addClass('loading-state');
                
                // Lưu trạng thái collapse trước khi load
                saveCollapseStates();
                
                let url = '/AdminAppointment/ApproveAppointments?page=' + page;
                if (filters) {
                    url += '&customer=' + encodeURIComponent(filters.customer || '');
                    url += '&pet=' + encodeURIComponent(filters.pet || '');
                    url += '&service=' + encodeURIComponent(filters.service || '');
                    url += '&status=' + encodeURIComponent(filters.status || '');
                }

                // Use requestAnimationFrame for smooth updates
                requestAnimationFrame(() => {
                    $.get(url, function (data) {
                        const $newContent = $(data).find('#appointments-list').html();
                        requestAnimationFrame(() => {
                            $('#appointments-list')
                                .html($newContent)
                                .removeClass('loading-state');
                            
                            // Khôi phục trạng thái collapse sau khi load
                            restoreCollapseStates();
                            loading = false;
                        });
                    });
                });
            }

            $(window).on('scroll', function () {
                if ($(window).scrollTop() + $(window).height() > $(document).height() - 200) {
                    let currentPage = parseInt($('.pagination .active').text()) || 1;
                    let nextPage = currentPage + 1;
                    if (!isNaN(nextPage)) loadPage(nextPage, getFilters());
                }
            });

            function getFilters() {
                return {
                    customer: $('#search-customer').val(),
                    pet: $('#search-pet').val(),
                    service: $('#search-service').val(),
                    status: $('#filter-status').val()
                };
            }

            $('#btn-filter').on('click', function () {
                loadPage(1, getFilters());
            });

            $('#search-customer, #search-pet, #search-service').on('keypress', function (e) {
                if (e.which === 13) {
                    loadPage(1, getFilters());
                }
            });

            $(document.body).on('click', '.btn-detail', function () {
                let id = $(this).data('appointment-id');
                window.location.href = '/AdminAppointment/Detail?id=' + id;
            });

            // Xử lý gán tự động
            $(document.body).on('click', '.btn-auto-assign', function (e) {
                e.preventDefault();
                let $btn = $(this);
                let id = $btn.data('appointment-id');
                let token = $("input[name='__RequestVerificationToken']").val() || $('meta[name="csrf-token"]').attr('content') || '';
                
                showCenterConfirmToast(
                    'Bạn có chắc chắn muốn gán nhân viên tự động cho lịch hẹn này?',
                    'Xác nhận',
                    'Huỷ',
                    function () {
                        $btn.prop('disabled', true);
                        $.ajax({
                            url: '/AdminAppointment/AutoAssignStaff',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({AppointmentId: id}),
                            headers: {'RequestVerificationToken': token},
                            success: function (res) {
                                toastr.options.positionClass = 'toast-top-right';
                                if (res.success) {
                                    let $row = $('#row-appointment-' + id);
                                    if ($row.length) {
                                        $row.fadeOut(300, function () {
                                            $(this).remove();
                                        });
                                        toastr.success('Đã gán nhân viên tự động thành công!');
                                    }
                                } else {
                                    toastr.error(res.message || 'Không thể tìm thấy nhân viên phù hợp');
                                    $btn.prop('disabled', false);
                                }
                            },
                            error: function (xhr) {
                                toastr.options.positionClass = 'toast-top-right';
                                let msg = 'Lỗi hệ thống, vui lòng thử lại!';
                                if (xhr && xhr.responseJSON && xhr.responseJSON.message) msg = xhr.responseJSON.message;
                                toastr.error(msg);
                                $btn.prop('disabled', false);
                            }
                        });
                    }
                );
            });

            // Tự động gán nhân viên
            $(document.body).on('click', '.btn-auto-assign', function () {
                let id = $(this).data('appointment-id');
                $.ajax({
                    url: '/AdminAppointment/AutoAssignStaff',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({AppointmentId: id}),
                    headers: {'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()},
                    success: function (res) {
                        toastr.options.positionClass = 'toast-top-right';
                        if (res.success) {
                            toastr.success('Đã tự động gán nhân viên!');
                            $('#row-appointment-' + id).fadeOut(300, function () {
                                $(this).remove();
                            });
                        } else {
                            toastr.error(res.message);
                        }
                    }
                });
            });

            // Duyệt hủy lịch (admin) - toast xác nhận ở giữa
            $(document.body).on('click', '.btn-approve-cancel', function () {
                let id = $(this).data('appointment-id');
                let token = $("input[name='__RequestVerificationToken']").val() || $('meta[name="csrf-token"]').attr('content') || '';
                showCenterConfirmToast(
                    'Bạn có chắc chắn muốn duyệt hủy lịch này?',
                    'Xác nhận duyệt hủy',
                    'Huỷ',
                    function () {
                        $.post('/AdminAppointment/QuickUpdateStatus', {
                            id: id,
                            statusId: 5,
                            __RequestVerificationToken: token
                        }, function (res) {
                            toastr.options.positionClass = 'toast-top-right';
                            if (res.success) {
                                $('#row-appointment-' + id).fadeOut(300, function () {
                                    $(this).remove();
                                });
                                toastr.success('Đã duyệt hủy lịch thành công!');
                                setTimeout(() => toastr.clear(), 1200);
                            } else {
                                toastr.error(res.message);
                            }
                        });
                    }
                );
            });

            // Từ chối hủy lịch (admin) - toast xác nhận ở giữa
            $(document.body).on('click', '.btn-reject-cancel', function () {
                let id = $(this).data('appointment-id');
                let token = $("input[name='__RequestVerificationToken']").val() || $('meta[name="csrf-token"]').attr('content') || '';
                showCenterConfirmToast(
                    'Bạn có chắc chắn muốn từ chối yêu cầu hủy lịch này?',
                    'Xác nhận từ chối',
                    'Huỷ',
                    function () {
                        $.post('/AdminAppointment/QuickUpdateStatus', {
                            id: id,
                            statusId: 1,
                            __RequestVerificationToken: token
                        }, function (res) {
                            toastr.options.positionClass = 'toast-top-right';
                            if (res.success) {
                                $('#row-appointment-' + id).fadeOut(300, function () {
                                    $(this).remove();
                                });
                                toastr.success('Đã từ chối yêu cầu hủy!');
                                setTimeout(() => toastr.clear(), 1200);
                            } else {
                                toastr.error(res.message);
                            }
                        });
                    }
                );
            });

            // Cập nhật trạng thái thông thường
            $(document.body).on('change', '.status-dropdown', function () {
                let id = $(this).data('appointment-id');
                let statusId = $(this).val();
                $.post('/AdminAppointment/QuickUpdateStatus', {id: id, statusId: statusId}, function (res) {
                    toastr.options.positionClass = 'toast-top-right';
                    if (res.success) {
                        toastr.success('Đã cập nhật trạng thái!');
                        $('#row-appointment-' + id).fadeOut(300, function () {
                            $(this).remove();
                        });
                    } else {
                        toastr.error(res.message);
                    }
                });
            });
            // Tối ưu xử lý collapse/expand
            function initializeCollapse() {
                $('.appointment-card').each(function() {
                    const $card = $(this);
                    const $content = $card.find('.collapse-content');
                    const $header = $card.find('.card-header');
                    const id = $content.attr('id');

                    // Thiết lập trạng thái ban đầu
                    if (!$content.hasClass('show')) {
                        $content.css('max-height', '0px');
                    }

                    // Xử lý click
                    $header.off('click').on('click', function(e) {
                        if ($(e.target).closest('button, select, input, a').length) return;

                        const isShow = $content.hasClass('show');
                        const scrollHeight = $content[0].scrollHeight;

                        if (!isShow) {
                            $content.css('max-height', scrollHeight + 'px');
                            $content.addClass('show');
                            expandedDates.add(id);
                        } else {
                            $content.css('max-height', '0px');
                            $content.removeClass('show');
                            expandedDates.delete(id);
                        }
                    });
                });
            }

            // Khởi tạo collapse khi trang load
            initializeCollapse();

            // Khởi tạo lại collapse sau khi load nội dung mới
            const originalLoadPage = loadPage;
            loadPage = function(...args) {
                originalLoadPage.apply(this, args);
                setTimeout(initializeCollapse, 100);
            };
            $(document).on('click', '.card-header button, .card-header select, .card-header input, .card-header a', function(e) {
                e.stopPropagation();
            });
        });
    </script>

    @* } *@
}