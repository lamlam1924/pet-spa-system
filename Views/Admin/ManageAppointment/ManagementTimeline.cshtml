@model pet_spa_system1.ViewModel.RealtimeShiftViewModel

@{
    ViewData["Title"] = "Sắp xếp lịch làm việc nhân viên";
    Layout = "~/Views/Admin/_LayoutAdmin.cshtml";
}

@section Styles {
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }

        /* Container lịch và nút bấm */
        .row.mb-3 {
            margin-top: 20px;
        }

        #nav {
            border: 1px solid #dee2e6;
            border-radius: 6px;
            box-shadow: 0 2px 8px rgb(0 0 0 / 0.1);
            background-color: #fff;
            padding: 15px;
            height: 500px;
        }

        #dp {
            border: 1px solid #dee2e6;
            border-radius: 6px;
            box-shadow: 0 4px 16px rgb(0 0 0 / 0.15);
            background-color: #fff;
            padding: 15px;
        }

        /* Nút điều hướng */
        .d-flex.mb-2 button {
            min-width: 90px;
            font-weight: 600;
            border-radius: 6px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .d-flex.mb-2 button:hover {
            filter: brightness(90%);
        }

        /* Chú thích trạng thái */
        .status-legend {
            margin-top: 15px;
            font-size: 0.9rem;
            user-select: none;
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
        }

        .status-legend span {
            padding: 6px 14px;
            border-radius: 12px;
            font-weight: 600;
            box-shadow: 0 0 6px rgb(0 0 0 / 0.1);
            transition: transform 0.15s ease;
            cursor: default;
        }

        .status-legend span:hover {
            transform: scale(1.1);
            box-shadow: 0 0 12px rgb(0 0 0 / 0.15);
        }

        /* Popup thông tin lịch */
        #infoModal {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #fff;
            border-radius: 12px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
            padding: 30px 25px;
            width: 400px;
            max-width: 90vw;
            z-index: 9999;
            user-select: none;
            color: #444;
        }

        #infoModal h5 {
            font-weight: 700;
            font-size: 1.25rem;
            margin-bottom: 18px;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }

        #modalContent p {
            margin-bottom: 12px;
            line-height: 1.4;
        }

        #infoModal button {
            display: block;
            width: 100%;
            font-weight: 600;
            padding: 10px 0;
            border-radius: 8px;
            border: none;
            background-color: #0d6efd;
            color: white;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #infoModal button:hover {
            background-color: #084cd6;
        }

        /* DayPilot event style override */
        .scheduler_default_event_inner {
            font-weight: 600;
            font-size: 0.85rem;
            color: #fff !important;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            padding: 6px 10px !important;
            border-radius: 6px !important;
            box-shadow: 0 3px 8px rgb(0 0 0 / 0.25);
        }

        /* DayPilot event hover */
        .scheduler_default_event_inner:hover {
            filter: brightness(110%);
            cursor: grab;
        }
    </style>

}

<div class="row mb-3">
    <div class="col-md-2">
        <div id="nav"></div>


    </div>
    <div class="col-md-10">
        <div class="d-flex mb-2">
            <button id="previous" class="btn btn-outline-secondary me-2">← Trước</button>
            <button id="today" class="btn btn-outline-primary me-2">Hôm nay</button>
            <button id="next" class="btn btn-outline-secondary">Tiếp →</button>
        </div>
        <div id="dp" style="height: 700px;"></div>
        <div class="status-legend" style="margin-top: 10px;">
            <span style="background:#28a745; padding: 5px 10px; color:#fff; border-radius: 4px;">Đã xác nhận (2)</span>
            <span style="background:#ffc107; padding: 5px 10px; color:#000; border-radius: 4px; margin-left:10px;">Đang thực hiện (3)</span>
            <span style="background:#17a2b8; padding: 5px 10px; color:#fff; border-radius: 4px; margin-left:10px;">Đã hoàn thành (4)</span>
            <span style="background:#dc3545; padding: 5px 10px; color:#fff; border-radius: 4px; margin-left:10px;">Chờ hủy (6)</span>
        </div>
    </div>
</div>

<!-- Popup trung tâm -->
<div id="infoModal" class="modal" tabindex="-1" style="display:none; position: fixed; top: 50%; left: 50%; 
    transform: translate(-50%, -50%); z-index: 9999; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 15px rgba(0,0,0,0.3); width: 400px;">
    <h5 class="mb-3">Thông tin lịch hẹn</h5>
    <div id="modalContent"></div>
    <button onclick="hidePopup()">Đóng</button>
</div>

@section Scripts {
    <script src="~/lib/daypilot/scripts/daypilot-all.min.js"></script>
    <script>
        function showPopup(message) {
            document.getElementById("modalContent").innerText = message;
            document.getElementById("infoModal").style.display = "block";
        }

        function hidePopup() {
            document.getElementById("infoModal").style.display = "none";
        }

        function showConfirmPopup(message) {
            return new Promise((resolve) => {
                const result = window.confirm(message); // Có thể thay bằng SweetAlert2 hoặc custom modal nếu muốn
                resolve(result);
            });
        }

        const statusColors = {2: "#28a745", 3: "#ffc107", 4: "#17a2b8", 6: "#dc3545"};
        const initialDate = '@Model.SelectedDate.ToString("yyyy-MM-dd")';

        const resources = @Html.Raw(Json.Serialize(Model.StaffShifts.Select(s => new { id = s.StaffId, name = s.StaffName })));

        const events = @Html.Raw(Json.Serialize(
                           Model.StaffShifts.SelectMany(s => s.Appointments.SelectMany(a =>
                               a.PetStaffAssignments.Select(p => new
                               {
                                   id = a.AppointmentId + "_" + p.PetId,
                                   text = $"Pet {p.PetName} - Chủ: {p.OwnerName}",
                                   start = $"{a.AppointmentDate:yyyy-MM-dd}T{a.StartTime:HH:mm:ss}",
                                   end = $"{a.AppointmentDate:yyyy-MM-dd}T{a.EndTime:HH:mm:ss}",
                                   resource = p.StaffId,
                                   appointmentId = a.AppointmentId,
                                   petId = p.PetId,
                                   statusId = a.StatusId
                               })
                           ))
                       ));

        const dp = new DayPilot.Scheduler("dp", {
            startDate: new DayPilot.Date(initialDate).addHours(8),
            days: 1,
            scale: "CellDuration",
            cellDuration: 30,
            cellWidth: 100,
            timeHeaders: [
                {groupBy: "Hour", format: "HH:mm"},
                {groupBy: "Cell", format: "mm"}
            ],
            eventHeight: 50,
            height: 650,
            resources: resources,
            events: events,
            businessBeginsHour: 8,
            businessEndsHour: 23,

            onBeforeEventRender: args => {
                args.data.backColor = statusColors[args.data.statusId] || "#6c757d";
                if (args.data.statusId !== 2) {
                    args.data.moveDisabled = true;
                    args.data.areas = [{html: "Không thể đổi nhân viên", bottom: 5, right: 5}];
                }
            },

            onEventMoving: args => {
                // Không cho phép kéo thay đổi thời gian
                if (args.newStart.value !== args.e.start.value || args.newEnd.value !== args.e.end.value) {
                    args.preventDefault();
                }
            },

            onEventMove: async function (args) {
                const id = args.e.data.id || args.e.id;
                const [appointmentId, petId] = id.split("_");
                const newStaffId = args.newResource;
                const originalStart = args.e.data.start;
                const originalEnd = args.e.data.end;

                try {
                    // B1: Kiểm tra nhân viên rảnh không
                    const checkRes = await fetch('@Url.Action("CheckStaffAvailable", "AdminAppointment")', {
                        method: "POST",
                        headers: {"Content-Type": "application/json"},
                        body: JSON.stringify({
                            appointmentId: parseInt(appointmentId),
                            petId: parseInt(petId),
                            newStaffId: parseInt(newStaffId)
                        })
                    });

                    const checkResult = await checkRes.json();
                    if (!checkResult.success) {
                        showPopup("Nhân viên đang bận trong khung giờ này.");
                        args.preventDefault();
                        return;
                    }

                    // B2: Xác nhận người dùng
                    const confirmed = await showConfirmPopup("Bạn có chắc muốn chuyển lịch cho nhân viên này?");
                    if (!confirmed) {
                        args.preventDefault();
                        return;
                    }

                    // B3: Gửi yêu cầu đổi lịch
                    const moveRes = await fetch('@Url.Action("MoveAppointment", "AdminAppointment")', {
                        method: "POST",
                        headers: {"Content-Type": "application/json"},
                        body: JSON.stringify({
                            appointmentId: parseInt(appointmentId),
                            petId: parseInt(petId),
                            newStaffId: parseInt(newStaffId)
                        })
                    });

                    const moveResult = await moveRes.json();
                    if (!moveResult.success) {
                        showPopup("Chuyển lịch thất bại: " + (moveResult.message || ""));
                        args.preventDefault();
                        return;
                    }

                    // B4: Cập nhật UI thủ công – reset lại vị trí đúng
                    dp.events.remove(args.e);
                    dp.events.add({
                        id: id,
                        text: args.e.data.text,
                        start: originalStart,
                        end: originalEnd,
                        resource: newStaffId,
                        data: {
                            ...args.e.data,
                            resource: newStaffId
                        }
                    });

                    showPopup("Chuyển lịch thành công.");
                    dp.events.load("/AdminAppointment/GetSchedulerEvents?date=" + currentDate);
                    args.preventDefault(); // bắt buộc chặn move mặc định

                } catch (err) {
                    console.error("Lỗi khi xử lý move:", err);
                    showPopup("Đã xảy ra lỗi trong quá trình xử lý.");
                    args.preventDefault();
                }
                

            },


            onAfterRender: () => {
                const scrollEl = dp.control.root;
                if (scrollEl) scrollEl.scrollLeft = 0;
            }
        });

        dp.init();

        const nav = new DayPilot.Navigator("nav", {
            showMonths: 1,
            skipMonths: 1,
            selectMode: "Day",
            onTimeRangeSelected: async args => {
                const selectedDate = args.day.toString().substring(0, 10);

                try {
                    const res = await fetch(`/AdminAppointment/GetTimelineData?date=${selectedDate}`);
                    if (!res.ok) throw new Error("Lỗi khi tải dữ liệu");

                    const data = await res.json();
                    dp.startDate = new DayPilot.Date(selectedDate).addHours(8);
                    dp.resources.list = data.resources;
                    dp.events.list = data.events;
                    dp.update();
                } catch (err) {
                    showPopup("Lỗi tải dữ liệu: " + err.message);
                }
            }
        });
        nav.init();

        document.getElementById("previous").addEventListener("click", () => {
            dp.startDate = dp.startDate.addDays(-1);
            dp.update();
        });

        document.getElementById("today").addEventListener("click", () => {
            dp.startDate = DayPilot.Date.today().addHours(8);
            dp.update();
        });

        document.getElementById("next").addEventListener("click", () => {
            dp.startDate = dp.startDate.addDays(1);
            dp.update();
        });
    </script>

}
