@model pet_spa_system1.ViewModel.RealtimeShiftViewModel
@{
    ViewData["Title"] = "Quản lý lịch làm việc";
    Layout = "~/Views/Admin/_LayoutAdmin.cshtml";
}




<div class="container-fluid py-4">
    <h2 class="text-success mb-4">Lịch làm việc nhân viên</h2>
    <div class="mb-3 d-flex align-items-center gap-2">
        <button class="btn btn-outline-primary btn-sm" id="btnPrevWeek">&lt; Tuần trước</button>
        <button class="btn btn-outline-secondary btn-sm" id="btnToday">Hôm nay</button>
        <button class="btn btn-outline-primary btn-sm" id="btnNextWeek">Tuần sau &gt;</button>
        <input type="date" id="startDateInput" class="form-control form-control-sm ms-3" style="width: 180px;" />
    </div>
    <div class="card shadow border-0">
        <div class="card-body p-0">
            <div id="dp"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="eventDetailModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content shadow-sm">
      <div class="modal-header bg-light border-0 pb-2">
        <h5 class="modal-title text-primary fw-bold" id="eventDetailTitle">
          <i class="far fa-calendar-alt me-2"></i>Chi tiết lịch hẹn
        </h5>
        <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
      </div>
      <div class="modal-body" id="eventDetailContent">
        <!-- Nội dung sẽ được render động -->
      </div>
      <div class="modal-footer bg-light border-0 pt-2">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Đóng</button>
      </div>
    </div>
  </div>
</div>



@section Styles {
    <link href="~/lib/demo/themes/scheduler_blue.css" rel="stylesheet" />
    <style>
        #dp { width: 100%; min-height: 600px; }
    </style>
}
@section Scripts {
    <script src="~/lib/scripts/daypilot-all.src.js"></script>
    <script>
        var dp;
        var currentStartDate = new Date();

        function loadScheduler(startDate) {
            fetch('/AdminAppointment/GetCalendarData')
                .then(res => res.json())
                .then(data => {
                    var resources = data.resources.map(r => ({
                        id: r.id,
                        name: r.title
                    }));
                    var events = data.events.map(e => ({
                        id: e.id,
                        resource: e.resourceId,
                        start: e.start,
                        end: e.end,
                        text: e.title
                    }));

                    if (!startDate) startDate = new Date();
                    currentStartDate = new Date(startDate);

                    if (dp) {
                        dp.update({
                            resources: resources,
                            events: events,
                            startDate: new DayPilot.Date(currentStartDate.toISOString().slice(0,10))
                        });
                    } else {
                        dp = new DayPilot.Scheduler("dp", {
                            resources: resources,
                            events: events,
                            startDate: new DayPilot.Date(currentStartDate.toISOString().slice(0,10)),
                            days: 1,
                            timeHeaders: [
                                { groupBy: "Day", format: "d/M" },
                                { groupBy: "Hour" }
                            ],
                            scale: "Hour",
                            cellWidth: 60,
                            onEventMoved: function(args) {
                            },
                            onEventMoving: function(args) {
                                // Prevent overlap: check if the new time/resource overlaps with any other event
                                var movingId = args.e.data.id;
                                var newResource = args.newResource;
                                var newStart = args.newStart;
                                var newEnd = args.newEnd;
                                var overlap = dp.events.list.some(function(ev) {
                                    if (ev.id === movingId) return false;
                                    if (ev.resource !== newResource) return false;
                                    var evStart = new DayPilot.Date(ev.start);
                                    var evEnd = new DayPilot.Date(ev.end);
                                    // Check for overlap
                                    return !(newEnd <= evStart || newStart >= evEnd);
                                });
                                if (overlap) {
                                    args.preventDefault();
                                    dp.message('Không thể xếp chồng nhiều lịch cho cùng một nhân viên trong cùng thời gian!');
                                }
                            },
                            onEventResizing: function(args) {
                                // Prevent overlap on resize
                                var resizingId = args.e.data.id;
                                var resource = args.e.data.resource;
                                var newStart = args.newStart;
                                var newEnd = args.newEnd;
                                var overlap = dp.events.list.some(function(ev) {
                                    if (ev.id === resizingId) return false;
                                    if (ev.resource !== resource) return false;
                                    var evStart = new DayPilot.Date(ev.start);
                                    var evEnd = new DayPilot.Date(ev.end);
                                    return !(newEnd <= evStart || newStart >= evEnd);
                                });
                                if (overlap) {
                                    args.preventDefault();
                                    dp.message('Không thể xếp chồng nhiều lịch cho cùng một nhân viên trong cùng thời gian!');
                                }
                                const oldResource = args.e.data.resource;
                                const oldStart = args.e.data.start;
                                const oldEnd = args.e.data.end;
                                fetch('@Url.Action("UpdateAppointmentCalendar", "AdminAppointment")', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                                    },
                                    body: JSON.stringify({
                                        AppointmentId: args.e.data.id,
                                        NewEmployeeId: args.newResource,
                                        NewStart: args.newStart.toString("yyyy-MM-ddTHH:mm:ss")
                                    })
                                })
                                .then(res => res.json())
                                .then(data => {
                                    if (!data.success) {
                                        // revert event to old position
                                        args.e.data.resource = oldResource;
                                        args.e.data.start = oldStart;
                                        args.e.data.end = oldEnd;
                                        dp.events.update(args.e);
                                        dp.update();
                                        dp.message('Cập nhật lịch hẹn thất bại!');
                                    }
                                })
                                .catch(() => {
                                    // revert event to old position
                                    args.e.data.resource = oldResource;
                                    args.e.data.start = oldStart;
                                    args.e.data.end = oldEnd;
                                    dp.events.update(args.e);
                                    dp.update();
                                    dp.message('Có lỗi khi cập nhật lịch hẹn!');
                                });
                            }
                        });
                        dp.init();
                    }
                    document.getElementById('startDateInput').value = currentStartDate.toISOString().slice(0,10);
                });
        }

        document.addEventListener('DOMContentLoaded', function() {
            if (window.DayPilot) {
                loadScheduler();
                document.getElementById('btnToday').onclick = function() {
                    loadScheduler(new Date());
                };
                document.getElementById('btnPrevWeek').onclick = function() {
                    var prev = new Date(currentStartDate);
                    prev.setDate(prev.getDate() - 7);
                    loadScheduler(prev);
                };
                document.getElementById('btnNextWeek').onclick = function() {
                    var next = new Date(currentStartDate);
                    next.setDate(next.getDate() + 7);
                    loadScheduler(next);
                };
                document.getElementById('startDateInput').onchange = function(e) {
                    var val = e.target.value;
                    if (val) loadScheduler(new Date(val));
                };
            } else {
                console.error('DayPilot chưa load!');
            }
        });
    </script>
}