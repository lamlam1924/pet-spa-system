using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using pet_spa_system1.Models;
using pet_spa_system1.Services;
using pet_spa_system1.Utils;
using pet_spa_system1.ViewModel;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.Migrations;

namespace pet_spa_system1.Controllers
{
    public class UserHomeController : Controller
    {
        private readonly IUserService _userService;
        private readonly IPetService _petService;
        private readonly ISpeciesService _speciesService;
        private readonly IOrderService _orderService;
        private readonly IOrderItemService _orderItemService;
        private readonly IProductService _productService;
        private readonly IOrderStatusService _orderStatusService;
        private readonly INotificationService _notificationService;
        public UserHomeController(
            IUserService userService,
            IPetService petService,
            ISpeciesService speciesService,
            IOrderService orderService,
            IOrderItemService orderItemService,
            IProductService productService,
            IOrderStatusService orderStatusService,
            INotificationService notificationService)
        {
            _userService = userService;
            _petService = petService;
            _speciesService = speciesService;
            _orderService = orderService;
            _orderItemService = orderItemService;
            _productService = productService;
            _orderStatusService = orderStatusService;
            _notificationService = notificationService;
        }

        public async Task<IActionResult> Index()
        {
            int? userId = HttpContext.Session.GetInt32("CurrentUserId");
            if (userId == null)
            {
                return RedirectToAction("Login", "Login");
            }
            var currentUser = await _userService.GetUserByIdAsync(userId.Value);
            if (currentUser == null)
            {
                return RedirectToAction("Login", "Login");
            }
            var userModel = new UserViewModel
            {
                UserName = currentUser.Username,
                Email = currentUser.Email,
                PhoneNumber = currentUser.Phone,
                Address = currentUser.Address,
                FullName = currentUser.FullName,
                ProfilePictureUrl = currentUser.ProfilePictureUrl
            };
            return View(userModel); // truy·ªÅn model v√†o view
        }
        public async Task<IActionResult> Hoso(string successMessage = null, string errorMessage = null)
        {
            int? userId = HttpContext.Session.GetInt32("CurrentUserId");
            var currentUser = await _userService.GetUserByIdAsync(userId.Value);

            var userModel = new UserViewModel
            {
                UserName = currentUser.Username,
                Email = currentUser.Email,
                PhoneNumber = currentUser.Phone,
                Address = currentUser.Address,
                FullName = currentUser.FullName,
                ProfilePictureUrl = currentUser.ProfilePictureUrl,

            };

            return PartialView("_HosoPartial", userModel);
        }

        public IActionResult ChangePasswordPartial()
        {
            var model = new ChangePasswordViewModel(); // model tr·ªëng ban ƒë·∫ßu
            return PartialView("_ChangePasswordPartial", model);
        }
        public async Task<IActionResult> NotificationsPartial()
        {
            int? userId = HttpContext.Session.GetInt32("CurrentUserId");

            var notifications = await _notificationService.GetByUserIdAsync(userId.Value);

            var viewModel = notifications.Select(n => new NotificationViewModel
            {
                Title = n.Title,
                Message = n.Message,
                CreatedAt = n.CreatedAt,
                IsRead = n.IsRead
            }).ToList();

            return PartialView("_NotificationPartial", viewModel);
        }

        [HttpPost]
        public async Task<IActionResult> MarkAllAsRead()
        {
            int? userId = HttpContext.Session.GetInt32("CurrentUserId");

            await _notificationService.MarkAllAsReadAsync(userId.Value);

            return await NotificationsPartial(); // reload l·∫°i view v·ªõi th√¥ng b√°o ƒë√£ ƒë·ªçc
        }

        [HttpPost]
        public async Task<IActionResult> DeleteAllNotifications()
        {
            int? userId = HttpContext.Session.GetInt32("CurrentUserId");

            await _notificationService.DeleteAllAsync(userId.Value);

            return await NotificationsPartial(); // reload l·∫°i view v·ªõi danh s√°ch r·ªóng
        }


        public IActionResult ListPetPartial()
        {
            int? userId = HttpContext.Session.GetInt32("CurrentUserId");
            var pets = _petService.GetPetsByUserId(userId.Value)
       .Where(p => p.IsActive == true) // Kh√¥ng c·∫ßn check l·∫°i UserID v√¨ repo ƒë√£ l·ªçc r·ªìi
       .Select(p => new PetViewModel
       {
           Id = p.PetId,
           Name = p.Name,
           Species = _speciesService.GetSpeciesNameById(p.SpeciesId), // tr√°nh null
           Gender = p.Gender,
           HealthCondition = p.HealthCondition,
           Note = p.SpecialNotes
       })
       .ToList();

            return PartialView("_ListPetPartial", pets);
        }
        public async Task<IActionResult> ListOrderPartial()
        {
            int? userId = HttpContext.Session.GetInt32("CurrentUserId");
            if (userId == null)
            {
                return PartialView("_ListOrderPartial", new List<pet_spa_system1.ViewModel.OrderViewModel>());
            }
            // L·∫•y danh s√°ch ƒë∆°n h√†ng ƒë·ªông t·ª´ service
            var orders = await Task.Run(() => _orderService.GetOrdersByUserId(userId));
            return PartialView("_ListOrderPartial", orders);
        }

        public IActionResult AddPetPartial()
        {
            // N·∫øu c·∫ßn truy·ªÅn model, c√≥ th·ªÉ truy·ªÅn model r·ªóng ho·∫∑c d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
            return PartialView("AddPetPartial");
        }

        public IActionResult EditPetPartial(int id)
        {
            int? userId = HttpContext.Session.GetInt32("CurrentUserId");
            if (userId == null)
            {
                return PartialView("_ErrorPartial", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
            }
            var pet = _petService.GetPetsByUserId(userId.Value).FirstOrDefault(p => p.PetId == id);
            if (pet == null)
            {
                return PartialView("_ErrorPartial", "Kh√¥ng t√¨m th·∫•y th√∫ c∆∞ng.");
            }
            // Chuy·ªÉn sang ViewModel n·∫øu c·∫ßn
            var petViewModel = new pet_spa_system1.ViewModel.PetViewModel
            {
                Id = pet.PetId,
                Name = pet.Name,
                Species = _speciesService.GetSpeciesNameById(pet.SpeciesId),
                Gender = pet.Gender,
                HealthCondition = pet.HealthCondition,
                Note = pet.SpecialNotes
            };
            return PartialView("EditPetPartial", petViewModel);
        }

        [HttpPost]
        public async Task<IActionResult> UpdateUserProfile(UserViewModel model, IFormFile Avatar)
        {
            // B·ªè qua l·ªói required cho Avatar n·∫øu kh√¥ng upload file m·ªõi
            // if (ModelState.ContainsKey("Avatar") && Avatar == null)
            // {
            //     ModelState["Avatar"].Errors.Clear();
            // }
            ModelState.Remove("Avatar");
            Console.WriteLine("üîß [UpdateUserProfile] B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t h·ªì s∆°...");

            if (!ModelState.IsValid)
            {
                Console.WriteLine("‚ùå [ModelState] Danh s√°ch l·ªói chi ti·∫øt:");
                foreach (var key in ModelState.Keys)
                {
                    var errors = ModelState[key].Errors;
                    if (errors.Count == 0)
                    {
                        Console.WriteLine($"    ‚ö™ Field: {key}, No error.");
                    }
                    foreach (var error in errors)
                    {
                        Console.WriteLine($"    üî¥ Field: {key}, Error: {error.ErrorMessage}");
                    }
                }
                Console.WriteLine($"T·ªïng s·ªë l·ªói: {ModelState.Values.SelectMany(v => v.Errors).Count()}");
                Console.WriteLine("C√°c key trong ModelState:");
                foreach (var key in ModelState.Keys)
                {
                    Console.WriteLine($"- {key}");
                }
                return await Hoso(errorMessage: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.");
            }

            int? userId = HttpContext.Session.GetInt32("CurrentUserId");
            Console.WriteLine($"‚ÑπÔ∏è [Session] CurrentUserId: {userId}");

            if (userId == null)
            {
                Console.WriteLine("‚ùå [Session] Kh√¥ng t√¨m th·∫•y CurrentUserId trong session.");
                return await Hoso(errorMessage: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
            }

            var user = await _userService.GetUserByIdAsync(userId.Value);
            if (user == null)
            {
                Console.WriteLine($"‚ùå [DB] Kh√¥ng t√¨m th·∫•y user v·ªõi ID = {userId}");
                return await Hoso(errorMessage: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
            }

            Console.WriteLine($"‚úÖ [User] T√¨m th·∫•y user: {user.Username} - B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t th√¥ng tin...");

            user.FullName = model.FullName;
            user.Username = model.UserName;
            user.Address = model.Address;
            user.Phone = model.PhoneNumber;

            if (Avatar != null && Avatar.Length > 0)
            {
                Console.WriteLine($"üì∏ [Avatar] File name: {Avatar.FileName}, size: {Avatar.Length}");
                string imageUrl = await _userService.UploadAvatarAsync(Avatar);
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    Console.WriteLine("‚úÖ [Avatar] Upload th√†nh c√¥ng. URL: " + imageUrl);
                    user.ProfilePictureUrl = imageUrl;
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è [Avatar] Upload th·∫•t b·∫°i ho·∫∑c URL r·ªóng.");
                }
            }
            else
            {
                Console.WriteLine("‚ÑπÔ∏è [Avatar] Kh√¥ng c√≥ avatar m·ªõi ƒë∆∞·ª£c upload.");
            }

            var result = await _userService.EditUserAsync(user);
            Console.WriteLine($"üìù [DB Update] K·∫øt qu·∫£ c·∫≠p nh·∫≠t: {(result.Success ? "Th√†nh c√¥ng" : "Th·∫•t b·∫°i")}. Message: {result.Message}");

            if (!result.Success)
            {
                return await Hoso(errorMessage: result.Message ?? "C·∫≠p nh·∫≠t th·∫•t b·∫°i.");
            }

            HttpContext.Session.SetString("CurrentUserName", user.Username);
            Console.WriteLine("‚úÖ [Session] C·∫≠p nh·∫≠t CurrentUserName trong session.");

            return await Hoso(successMessage: result.Message ?? "C·∫≠p nh·∫≠t th√†nh c√¥ng.");
        }


        [HttpPost]
        public IActionResult DeletePet(int id)
        {
            _petService.DisablePetAsync(id);
            int? userId = HttpContext.Session.GetInt32("CurrentUserId");
            var pets = _petService.GetPetsByUserId(userId.Value)
                .Select(p => new PetViewModel
                {
                    Id = p.PetId,
                    Name = p.Name,
                    Species = _speciesService.GetSpeciesNameById(p.SpeciesId),
                    Gender = p.Gender,
                    HealthCondition = p.HealthCondition,
                    Note = p.SpecialNotes
                }).ToList();

            return PartialView("_ListPetPartial", pets); // ho·∫∑c ƒë·ªïi t√™n t∆∞∆°ng ·ª©ng n·∫øu b·∫°n d√πng t√™n kh√°c
        }

        //public IActionResult AddPetPartial()
        //{
        //    // N·∫øu c·∫ßn truy·ªÅn model, c√≥ th·ªÉ truy·ªÅn model r·ªóng ho·∫∑c d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
        //    return PartialView("AddPetPartial");
        //}

    }
}